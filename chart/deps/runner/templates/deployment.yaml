apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "runner.fullname" . }}
  labels:
    {{- include "runner.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "runner.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "runner.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "runner.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
      {{ if .Values.volumes }}
      {{ tpl (toYaml (index .Values.volumes )) . | nindent 6 }}
      {{ end }}
      {{ if .Values.extraVolumes }}
      {{ tpl (toYaml (index .Values.extraVolumes )) . | nindent 6 }}
      {{ end }}
      #mount docker.sock only if container engine is docker
      {{- if eq .Values.global.container_engine "docker" }}
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{ if .Values.container.extra_options }}
          {{- toYaml .Values.container.extra_options | nindent 10 }}
          {{ end }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "/opt/rapidfort/runner/app/prestop-hook.sh"]
          env:
            - name: LC_ALL
              value: "en_US.UTF-8"
            #inject create values as env variable.
            {{ if .Values.secret.name }}
            {{- $secretName := .Values.secret.name }}
            {{- range .Values.secret.keys }}
            - name: {{ . | quote}}
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: {{ . | quote}}
            {{- end }}
            {{ end }}
            {{ if .Values.rf_role_arn }}
            - name: RF_ROLE_ARN
              value: "{{ .Values.env.rf_role_arn }}"
            {{ end }}
            - name: RUNNER_APP_PORT
              value: "{{ .Values.service.container_port }}"
            - name: RF_DEBUG
              value: "{{ .Values.env.rf_debug }}"
            - name: RF_REDIS_HOST_NAME_HA
              value: "{{ .Values.env.redis_host_ha }}"
            - name: RF_REDIS_PORT_HA
              value: "{{ .Values.env.redis_port_ha }}"
            - name: RF_REDIS_PWD_HA
              value: "{{ .Values.env.redis_pwd_ha }}"
            - name: RF_REDIS_DB_HA
              value: "{{ .Values.env.redis_db_ha }}"
            - name: RF_REDIS_HOST_NAME
              value: "{{ .Values.env.redis_host }}"
            - name: RF_REDIS_PORT
              value: "{{ .Values.env.redis_port }}"
            - name: RF_REDIS_PWD
              value: "{{ .Values.env.redis_pwd }}"
            - name: RF_INTERNAL
              value: "1"                    
            - name: RF_CONTAINER_ENGINE
              value: "{{ .Values.global.container_engine }}"
            - name: BACKEND_SERVICE_NAME
              value: "{{ .Values.env.backend_service_name }}"              
          volumeMounts:
            {{ if .Values.volumeMounts }}
            {{ tpl (toYaml (index .Values.volumeMounts )) . | nindent 12 }}
            {{ end }}
            {{ if .Values.extraVolumeMounts }}
            {{ tpl (toYaml (index .Values.extraVolumeMounts )) . | nindent 12 }}
            {{ end }}
            #mount docker.sock only if container engine is docker
            {{- if eq .Values.global.container_engine "docker" }}
            - name: dockersock
              mountPath: "/var/run/docker.sock"
            {{- end }}
          ports:
            - name: runner-http
              containerPort: {{ .Values.service.container_port }}
              protocol: TCP
          startupProbe:
            httpGet:
              path: /
              port: runner-http
            failureThreshold: 120
            periodSeconds: 2
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
            {{- toYaml .Values.probeCommand | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
            {{- toYaml .Values.probeCommand | nindent 12 }}           
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: init
        image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag | default .Chart.AppVersion }}"
        command:
          - "/bin/bash"
          - "-c"
          - "until [ $(curl -sw '%{http_code}' http://backend -o /dev/null) -eq 200 ]; do echo backend not ready; sleep 1; done"
